class PlayersJet {
    field int x, y;        // x and y position of the jet
    field int velocity;    // Vertical velocity for gravity and movement

    constructor PlayersJet new(int startX, int startY) {
        let x = startX;  // Set initial x position
        let y = startY;  // Set initial y position
        let velocity = 0; // Jet starts with zero velocity
        return this;
    }

    // Getter methods to return the jet's current position
    method int getX() { 
        return x; 
    }
    method int getY() { 
        return y; 
    }

    // Method to dispose of the jet and free memory
    method void dispose() {
        do erase();  // Remove the jet from the screen
        do Memory.deAlloc(this);  // Free memory allocated for this object
        return;
    }

 method void draw() {
        var int position;
        // Calculate the memory address for the jet's pixel representation
        let position = 16384 + ((y / 8) * 32) + (x / 16);

	do Memory.poke(position, 24577);
	do Memory.poke(position +32, 24579);
	do Memory.poke(position +64, 28679);
	do Memory.poke(position +96, 30735);
	do Memory.poke(position +128, -1);
	do Memory.poke(position +160, -1);
	do Memory.poke(position +192, -1);
	do Memory.poke(position +224, -1);
	do Memory.poke(position +256, 16128);
	do Memory.poke(position +288, 8064);
	do Memory.poke(position +320, 4032);
	do Memory.poke(position +352, 8160);
	// column 1
	do Memory.poke(position +65, 96);
	do Memory.poke(position +97, 96);
	do Memory.poke(position +129, 1023);
	do Memory.poke(position +161, 1279);
	do Memory.poke(position +193, 3327);
	do Memory.poke(position +225, 4095);
	do Memory.poke(position +257, 31);
	do Memory.poke(position +289, 3);
	return;
}
 method void erase() {
             var int position;
        // Calculate the memory address for the jet's pixel representation
        let position = 16384 + ((y / 8) * 32) + (x / 16);

	do Memory.poke(position, 0);
	do Memory.poke(position +32, 0);
	do Memory.poke(position +64, 0);
	do Memory.poke(position +96, 0);
	do Memory.poke(position +128, 0);
	do Memory.poke(position +160, 0);
	do Memory.poke(position +192, 0);
	do Memory.poke(position +224, 0);
	do Memory.poke(position +256, 0);
	do Memory.poke(position +288, 0);
	do Memory.poke(position +320, 0);
	do Memory.poke(position +352, 0);
	// column 1
	do Memory.poke(position +65, 0);
	do Memory.poke(position +97, 0);
	do Memory.poke(position +129, 0);
	do Memory.poke(position +161, 0);
	do Memory.poke(position +193, 0);
	do Memory.poke(position +225, 0);
	do Memory.poke(position +257, 0);
	do Memory.poke(position +289, 0);
	return;
  }
    // Method to move the jet upwards (player-controlled)
    method void moveUp() {
        do erase();  // Erase the previous position before moving

        let velocity = -15;  // Apply upward thrust (negative velocity)

        // Ensure the jet doesn't move above the screen
        if ((y + velocity) < 10) {
            let y = 10;
        } 
        else {
            let y = y + velocity;
        }

        do draw();  // Redraw the jet in the new position
        return;
    }

    // Method to apply gravity to the jet (automatically pulls it down)
    method void applyGravity() {
        do erase();  // Erase the previous position

        let velocity = velocity + 3;  // Increase velocity (fall speed)
        if (velocity > 15) {  // Limit the maximum falling speed
            let velocity = 15;
        }

        let y = y + velocity;  // Move the jet downward

        // Prevent the jet from falling below the screen
        if (y > 1925) {
            let y = 1925;
            let velocity = 0;
            do Output.moveCursor(13, 25);
            do Output.printString("GAME OVER");
            return;  // Reset velocity when it hits the ground
        }

        do draw();  // Redraw the jet in the new position
        return;
    }
}
